@using Domain.DTOs
@using Domain.Models
@using HttpClients.ClientInterfaces
@namespace Components
@inject IPostService postService
@inject IUserService userService
@inject NavigationManager navMgr

<PopUp ShowModal="showModal" Type="success">
    <p>You have successfully created new post!</p>
    <button class="btn btn-outline-success" @onclick="@Proceed">Show me</button>
</PopUp>

<div class="form-body">
	<div class="row">
		<div class="form-holder">
			<div class="form-content">
				<div class="form-items">

					<div class="col-md-12">
						<input class="form-control" type="text" name="title" placeholder="Title" required @bind="title">
						<div @bind="titleMessage" class="invalid-feedback"></div>
					</div>

					<div class="col-md-12">
						<textarea @bind="body" class="form-control" name="body" cols="30" rows="10" placeholder="Your post here ..."></textarea>
						<div @bind="bodyMessage" class="invalid-feedback"></div>
					</div>

					<div class="form-button mt-3">
						<button @onclick="Create" id="submit" type="submit" class="btn btn-primary">Post</button>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>

@code {

	[Parameter]
	public string username { get; set; }

	private string title;
	private string body;
	private int postId;

	private string titleMessage = "";
	private string bodyMessage = "";

	private bool showModal;

	private void Proceed()
	{
		showModal = false;
		navMgr.NavigateTo("/post/" + postId);
	}

	private async Task Create()
	{
		if (string.IsNullOrEmpty(title))
		{
			titleMessage = "Title cannot be empty!";
			return;
		}
		if (string.IsNullOrEmpty(body))
		{
			bodyMessage = "Body cannot be empty!";
			return;
		}

		try
		{
			IEnumerable<User> users = await userService.GetUsersAsync(username);

			//TODO id change later
			PostDto dto = new(users.FirstOrDefault().Id, title, body);
			Post post = await postService.CreateAsync(dto);

			postId = post.Id;
			showModal = true;
		}
		catch (Exception e)
		{
			Console.WriteLine(e);
		}
	}

}
