@using BlazorWasm.Services
@using Domain.Models
@namespace Components

@inject IAuthService authService;
@inject NavigationManager navMgr

<PopUp ShowModal="showModal" Type="success">
    <p>You have successfully registered!</p>
    <button class="btn btn-outline-success" @onclick="@Proceed">Log in</button>
</PopUp>

<div class="form-body">
	<div class="row">
		<div class="form-holder">
			<div class="form-content">
				<div class="form-items">

					<div class="col-md-12">
						<input @bind="userName" class="form-control" type="text" name="name" placeholder="UserName" required>
						<div class="text-danger @(showLabel ? "" : "d-none")">@(string.IsNullOrEmpty(userName) ? "Username cannot be empty!" : "")</div>
					</div>

					<div class="col-md-12">
						<input @bind="password" class="form-control" type="password" name="password" placeholder="Password" required>
						<div class="text-danger @(showLabel ? "" : "d-none")">@(string.IsNullOrEmpty(password) ? "Password cannot be empty!" : "")</div>
					</div>

					<div class="col-md-12">
						<input @bind="passwordRepeat" class="form-control" type="password" name="passwordRepeat" placeholder="Repeat Password" required>
						<div class="text-danger @(showLabel ? "" : "d-none")">@(string.IsNullOrEmpty(passwordRepeat) ? "Password cannot be empty!" : "")</div>
					</div>
					<div class="text-danger">@errorLabel</div>

					<div class="form-button mt-3">
						<button id="submit" @onclick="RegisterAsync" class="btn btn-primary">Register</button>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>

@code {
	private string userName;
	private string password;
	private string passwordRepeat;
	private string errorLabel;
	private bool showLabel = false;

	private bool showModal;

	private void Proceed()
	{
		showModal = false;
		navMgr.NavigateTo("/account");
	}

	private async Task RegisterAsync()
	{
		errorLabel = "";

		if (string.IsNullOrEmpty(userName))
		{
			showLabel = true;
			return;
		}

		if (string.IsNullOrEmpty(password))
		{
			showLabel = true;
			return;
		}

		if (string.IsNullOrEmpty(passwordRepeat))
		{
			showLabel = true;
			return;
		}

		try
		{
			await authService.RegisterAsync(new (userName, password, passwordRepeat));
			showModal = true;
		}
		catch (Exception e)
		{
			Console.WriteLine(e);
			errorLabel = e.Message;
		}
	}
}
